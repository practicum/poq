
categories: empty set 'edge cases'.


~~ type safety, types. equality. joins
~~ vendor implementation inadequacies.

mysql> select * from Student;
+------+--------+------+
| s_id | s_name | d_id |
+------+--------+------+
|    1 | Alice  |    2 |
|    2 | Bob    |    3 |
|    3 | Carol  |    2 |
+------+--------+------+
3 rows in set (0.00 sec)

mysql> select * from Department;
+----+------------+
| id | dept_name  |
+----+------------+
|  1 | Math       |
|  2 | English    |
|  3 | Psychology |
+----+------------+
3 rows in set (0.00 sec)

mysql> select * from Dormitory;
+----+-----------+
| id | d_name    |
+----+-----------+
|  1 | Jefferson |
|  2 | Lincoln   |
|  3 | Roosevelt |
+----+-----------+
3 rows in set (0.00 sec)

mysql> select st.s_name, dept.dept_name from Student st join Department dept on st.d_id = dept.id;
+--------+------------+
| s_name | dept_name  |
+--------+------------+
| Alice  | English    |
| Carol  | English    |
| Bob    | Psychology |
+--------+------------+
3 rows in set (0.00 sec)

mysql> select st.s_name, d.d_name from Student st join Dormitory d on st.d_id = d.id;
+--------+-----------+
| s_name | d_name    |
+--------+-----------+
| Alice  | Lincoln   |
| Carol  | Lincoln   |
| Bob    | Roosevelt |
+--------+-----------+
3 rows in set (0.00 sec)

===============================================================================
===============================================================================
===============================================================================


~~ ordering. equality. strings. collations

create temporary table StringDemo(string varchar(100), id int);

insert into StringDemo values ('A ', 20);
insert into StringDemo values ('B', 30);
insert into StringDemo values ('C', 40);
insert into StringDemo values ('D', 25);
insert into StringDemo values ('A ', 21);
insert into StringDemo values ('A', 32);
insert into StringDemo values ('A ', 28);

mysql> select * from StringDemo;
+--------+------+
| string | id   |
+--------+------+
| A      |   20 |
| B      |   30 |
| C      |   40 |
| D      |   25 |
| A      |   21 |
| A      |   32 |
| A      |   28 |
+--------+------+
7 rows in set (0.01 sec)

mysql> select quote(string), length(string), id from StringDemo;
+---------------+----------------+------+
| quote(string) | length(string) | id   |
+---------------+----------------+------+
| 'A '          |              2 |   20 |
| 'B'           |              1 |   30 |
| 'C'           |              1 |   40 |
| 'D'           |              1 |   25 |
| 'A '          |              2 |   21 |
| 'A'           |              1 |   32 |
| 'A '          |              2 |   28 |
+---------------+----------------+------+
7 rows in set (0.00 sec)

mysql> select     quote(string),      count(*) as count from StringDemo group by string;
+---------------+-------+
| quote(string) | count |
+---------------+-------+
| 'A '          |     4 |
| 'B'           |     1 |
| 'C'           |     1 |
| 'D'           |     1 |
+---------------+-------+
4 rows in set (0.00 sec)


select
    string,
    count(*) count
from StringDemo
group by string;

===============================================================================
===============================================================================
===============================================================================

~~ ordering. equality. strings. collations


create temporary table StringDemo(string varchar(100), id int);

insert into StringDemo values ('A', 20);
insert into StringDemo values ('B', 30);
insert into StringDemo values ('C', 40);
insert into StringDemo values ('D', 25);
insert into StringDemo values ('a', 21);
insert into StringDemo values ('a', 32);
insert into StringDemo values ('a', 28);

select
    string,
    count(*) as count
from StringDemo
group by string;

mysql> select * from StringDemo;
+--------+------+
| string | id   |
+--------+------+
| A      |   20 |
| B      |   30 |
| C      |   40 |
| D      |   25 |
| a      |   21 |
| a      |   32 |
| a      |   28 |
+--------+------+
7 rows in set (0.00 sec)

mysql> select     string,      count(*) as count from StringDemo group by string;
+--------+-------+
| string | count |
+--------+-------+
| A      |     4 |
| B      |     1 |
| C      |     1 |
| D      |     1 |
+--------+-------+
4 rows in set (0.00 sec)

===============================================================================
===============================================================================
===============================================================================


~~ strings. type safety. 'the assignment principle'

mysql> create temporary table StringDemo3(string varchar(4), id int);
Query OK, 0 rows affected (0.01 sec)

mysql> insert into StringDemo3 ( string, id ) values ('abcdef', 4);
Query OK, 1 row affected, 1 warning (0.01 sec)

Warning (Code 1265): Data truncated for column 'string' at row 1
mysql> select * from StringDemo3;
+--------+------+
| string | id   |
+--------+------+
| abcd   |    4 |
+--------+------+
1 row in set (0.00 sec)

===============================================================================
===============================================================================
===============================================================================


~~ coercion. cardinality of nested expression.
~~ 'selectivity' of the WHERE expression. assuming it selects 0 or 1.

mysql> select * from OrderItems;
+----------+----------------+------------------+
| order_id | product        | quantity_ordered |
+----------+----------------+------------------+
|        1 | toothbrush     |                1 |
|        1 | bar soap       |                3 |
|        2 | ream paper     |                2 |
|        2 | pencils, 12 pk |                1 |
|        3 | pens, 12 pk    |                4 |
|        4 | socks, 3 pk    |                2 |
+----------+----------------+------------------+
6 rows in set (0.00 sec)

mysql> select * from RefundClaim;
+-------------+----------+---------------------+
| customer_id | order_id | claim_date          |
+-------------+----------+---------------------+
| CUST0032    |        1 | 2012-01-15 00:00:00 |
| CUST0058    |        3 | 2012-04-15 00:00:00 |
| CUST0058    |        4 | 2012-04-15 00:00:00 |
+-------------+----------+---------------------+
3 rows in set (0.00 sec)

mysql> select * from OrderItems where order_id = ( select order_id from RefundClaim where customer_id = 'CUST0032' and claim_date = '2012-01-15');
+----------+------------+------------------+
| order_id | product    | quantity_ordered |
+----------+------------+------------------+
|        1 | toothbrush |                1 |
|        1 | bar soap   |                3 |
+----------+------------+------------------+
2 rows in set (0.00 sec)

mysql> select * from OrderItems where order_id = ( select order_id from RefundClaim where customer_id = 'CUST0058' and claim_date = '2012-04-15');
ERROR 1242 (21000): Subquery returns more than 1 row

===============================================================================
===============================================================================
===============================================================================


~~ correlation gotchas.
~~ vendor implementation inadequacies.
~~ 'selectivity' of the GROUP BY expression (?).

mysql> select * from ShoppingCart;
+---------+---------------------+
| cart_id | cart_date           |
+---------+---------------------+
| EJXHFJ  | 2010-08-17 00:00:00 |
| IDHCJT  | 2010-12-28 00:00:00 |
| TJCHSS  | 2011-03-23 00:00:00 |
| UDIXXS  | 2012-07-08 00:00:00 |
+---------+---------------------+
4 rows in set (0.00 sec)

mysql> select * from ShoppingCartItems;
+---------+------------+
| cart_id | product    |
+---------+------------+
| EJXHFJ  | toothbrush |
| EJXHFJ  | washcloth  |
| IDHCJT  | toothbrush |
| TJCHSS  | toothbrush |
| UDIXXS  | washcloth  |
+---------+------------+
5 rows in set (0.00 sec)

mysql> select * from ShoppingCart c join ShoppingCartItems ci on c.cart_id = ci.cart_id;
+---------+---------------------+---------+------------+
| cart_id | cart_date           | cart_id | product    |
+---------+---------------------+---------+------------+
| EJXHFJ  | 2010-08-17 00:00:00 | EJXHFJ  | toothbrush |
| EJXHFJ  | 2010-08-17 00:00:00 | EJXHFJ  | washcloth  |
| IDHCJT  | 2010-12-28 00:00:00 | IDHCJT  | toothbrush |
| TJCHSS  | 2011-03-23 00:00:00 | TJCHSS  | toothbrush |
| UDIXXS  | 2012-07-08 00:00:00 | UDIXXS  | washcloth  |
+---------+---------------------+---------+------------+
5 rows in set (0.00 sec)

mysql> select max(c.cart_date) as recent_date, ci.product from ShoppingCart c join ShoppingCartItems ci on c.cart_id = ci.cart_id group by ci.product;
+---------------------+------------+
| recent_date         | product    |
+---------------------+------------+
| 2011-03-23 00:00:00 | toothbrush |
| 2012-07-08 00:00:00 | washcloth  |
+---------------------+------------+
2 rows in set (0.00 sec)

mysql> select max(c.cart_date) as recent_date, ci.product, c.cart_id from ShoppingCart c join ShoppingCartItems ci on c.cart_id = ci.cart_id group by ci.product;
+---------------------+------------+---------+
| recent_date         | product    | cart_id |
+---------------------+------------+---------+
| 2011-03-23 00:00:00 | toothbrush | EJXHFJ  |
| 2012-07-08 00:00:00 | washcloth  | EJXHFJ  |
+---------------------+------------+---------+
2 rows in set (0.00 sec)

mysql> SET SQL_MODE=(SELECT CONCAT(@@sql_mode,',ONLY_FULL_GROUP_BY'));
Query OK, 0 rows affected (0.00 sec)

mysql> select max(c.cart_date) as recent_date, ci.product, c.cart_id from ShoppingCart c join ShoppingCartItems ci on c.cart_id = ci.cart_id group by ci.product;
ERROR 1055 (42000): 'camping.c.cart_id' isn't in GROUP BY


-- second attempt. 'closer'. seems 'apparently correct' but LIKELY NOT still 100% technically logically correct:
-- (assumes that cart_id is increasing just like date)

mysql> select max(c.cart_date) as recent_date, ci.product, max( c.cart_id ) as recent_cart from ShoppingCart c join ShoppingCartItems ci on c.cart_id = ci.cart_id group by ci.product;
+---------------------+------------+-------------+
| recent_date         | product    | recent_cart |
+---------------------+------------+-------------+
| 2011-03-23 00:00:00 | toothbrush | TJCHSS      |
| 2012-07-08 00:00:00 | washcloth  | UDIXXS      |
+---------------------+------------+-------------+
2 rows in set (0.00 sec)


hard to rely on id columns having a monotone increasing property, even with something like auto_increment enabled.

"""
No you can not assume that. One scenario where ID's would not be sequential is in replicated multi-master setup. If for example two servers exist in such setup, one will only generate even auto IDs, and the other only odd IDs (keep in mind it's just an example).

http://stackoverflow.com/questions/6895679/mysqls-auto-increment-behavior-in-a-multiple-row-insert
"""



===============================================================================
===============================================================================
===============================================================================


~~ enum. types. ordering by enum. ordering assumptions.

mysql> select * from EnumOrderingDemo;
+------------+-------------+
| some_value | enum_column |
+------------+-------------+
|         34 | orange      |
|         23 | red         |
|         73 | red         |
|         87 | yellow      |
|         92 | orange      |
+------------+-------------+
5 rows in set (0.00 sec)

mysql> select * from EnumDemo order by enum_column;
+------------+-------------+
| some_value | enum_column |
+------------+-------------+
|         23 | red         |
|         73 | red         |
|         34 | orange      |
|         92 | orange      |
|         87 | yellow      |
+------------+-------------+
5 rows in set (0.00 sec)

mysql> -- create temporary table EnumDemo( some_value bigint, enum_column ENUM('red','orange','yellow') );



===============================================================================
===============================================================================
===============================================================================

~~ NULL gotchas

the SUM over a non-nullable integer column in an empty table is NULL and not zero.

min and max are null. Date argues that min of empty should be the TYPE's max, and max of empty should be the type's min. this would be similar to how shortest-path algorithms initialize path lengths to INFINITY and only overwrite that as shorter paths are found.

===============================================================================
===============================================================================
===============================================================================


~~ NULL gotchas

mysql> select * from NamesDemo;
+-------+--------+--------+
| first | middle | last   |
+-------+--------+--------+
| Alice | NULL   | Smith  |
| Bob   | M      | Jones  |
| Carol | P      | Taylor |
+-------+--------+--------+
3 rows in set (0.00 sec)

mysql> select * from NamesDemo where middle = 'P';
+-------+--------+--------+
| first | middle | last   |
+-------+--------+--------+
| Carol | P      | Taylor |
+-------+--------+--------+
1 row in set (0.00 sec)

mysql> select * from NamesDemo where not middle = 'P';
+-------+--------+-------+
| first | middle | last  |
+-------+--------+-------+
| Bob   | M      | Jones |
+-------+--------+-------+
1 row in set (0.00 sec)


===============================================================================
===============================================================================
===============================================================================


~~ NULL gotchas

mysql> select * from NamesDemo;
+-------+--------+--------+
| first | middle | last   |
+-------+--------+--------+
| Alice | NULL   | Smith  |
| Bob   | M      | Jones  |
| Carol | P      | Taylor |
+-------+--------+--------+
3 rows in set (0.00 sec)

mysql> select count(1), middle from NamesDemo group by middle;
+----------+--------+
| count(1) | middle |
+----------+--------+
|        1 | NULL   |
|        1 | M      |
|        1 | P      |
+----------+--------+
3 rows in set (0.00 sec)

mysql> select * from NamesDemo;
+-------+--------+--------+
| first | middle | last   |
+-------+--------+--------+
| Alice | NULL   | Smith  |
| Bob   | M      | Jones  |
| Carol | P      | Taylor |
| Carol | NULL   | Lynn   |
+-------+--------+--------+
4 rows in set (0.00 sec)

mysql> select count(1), middle from NamesDemo group by middle;
+----------+--------+
| count(1) | middle |
+----------+--------+
|        2 | NULL   |
|        1 | M      |
|        1 | P      |
+----------+--------+
3 rows in set (0.00 sec)



===============================================================================
===============================================================================
===============================================================================

~~ NULL gotchas

mysql> select * from NamesDemo;
+-------+--------+--------+
| first | middle | last   |
+-------+--------+--------+
| Alice | NULL   | Smith  |
| Bob   | M      | Jones  |
| Carol | P      | Taylor |
+-------+--------+--------+
3 rows in set (0.00 sec)

mysql> select concat( first, ' ', middle, ' ', last ) from NamesDemo;
+-----------------------------------------+
| concat( first, ' ', middle, ' ', last ) |
+-----------------------------------------+
| NULL                                    |
| Bob M Jones                             |
| Carol P Taylor                          |
+-----------------------------------------+
3 rows in set (0.00 sec)


===============================================================================
===============================================================================
===============================================================================

~~ NULL gotchas

mysql> select * from A;
+-------+
| int_a |
+-------+
|     5 |
|     6 |
|     7 |
|     8 |
|  NULL |
+-------+
5 rows in set (0.00 sec)

mysql> select * from B;
+-------+
| int_b |
+-------+
|     7 |
+-------+
1 row in set (0.00 sec)

mysql> select * from A a where a.int_a not in (select int_b from B);
+-------+
| int_a |
+-------+
|     5 |
|     6 |
|     8 |
+-------+
3 rows in set (0.00 sec)

mysql> select * from A a where not exists (select int_b from B b where b.int_b = a.int_a);
+-------+
| int_a |
+-------+
|     5 |
|     6 |
|     8 |
|  NULL |
+-------+
4 rows in set (0.00 sec)



===============================================================================
===============================================================================
===============================================================================

~~ aggregates.
~~ nulls.

mysql> select * from Number;
+------+
| num  |
+------+
|    3 |
|    4 |
+------+
2 rows in set (0.00 sec)

mysql> select count(1), sum(1) from Number;
+----------+--------+
| count(1) | sum(1) |
+----------+--------+
|        2 |      2 |
+----------+--------+
1 row in set (0.00 sec)

mysql> delete from Number;
Query OK, 2 rows affected (0.01 sec)

mysql> select * from Number;
Empty set (0.00 sec)

mysql> select count(1), sum(1) from Number;
+----------+--------+
| count(1) | sum(1) |
+----------+--------+
|        0 |   NULL |
+----------+--------+
1 row in set (0.00 sec)

mysql> select count(1), sum(1) from Number group by num;
Empty set (0.00 sec)


===============================================================================
===============================================================================
===============================================================================

~~ order of operations.
~~ editing code.
~~ false assumptions on equivalencies of two queries.

mysql> select * from Employee;
+---------+----------+--------+
| dept_id | emp_name | salary |
+---------+----------+--------+
|     101 | Jones    |   4500 |
|     101 | Martin   |    990 |
|     101 | Smith    |    890 |
|     209 | Swanson  |   3100 |
|     209 | Knight   |   3100 |
|     330 | Taylor   |    850 |
+---------+----------+--------+
6 rows in set (0.00 sec)

mysql> select dept_id, sum( case when salary < 1000 then 1 else 0 end ) as low_earners from Employee group by dept_id;
+---------+-------------+
| dept_id | low_earners |
+---------+-------------+
|     101 |           2 |
|     209 |           0 |
|     330 |           1 |
+---------+-------------+
3 rows in set (0.00 sec)

mysql> select dept_id, count(1) from Employee where salary < 1000 group by dept_id;
+---------+----------+
| dept_id | count(1) |
+---------+----------+
|     101 |        2 |
|     330 |        1 |
+---------+----------+
2 rows in set (0.01 sec)



===============================================================================
===============================================================================
===============================================================================

~~ nulls.
~~ left join.

mysql> select * from Customer;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
|    6 |
+------+
6 rows in set (0.00 sec)

mysql> select * from OptionalInfo;
+-------------+-------+
| customer_id | title |
+-------------+-------+
|           2 | Mr.   |
|           5 | Mr.   |
|           6 | Ms.   |
+-------------+-------+
3 rows in set (0.00 sec)

mysql> select  * from Customer c join OptionalInfo oi on c.id = oi. customer_id where coalesce( oi. title, '') <> 'Mr.';
+------+-------------+-------+
| id   | customer_id | title |
+------+-------------+-------+
|    6 |           6 | Ms.   |
+------+-------------+-------+
1 row in set (0.00 sec)

mysql> select  * from Customer c join OptionalInfo oi on c.id = oi. customer_id and coalesce( oi. title, '') <> 'Mr.';
+------+-------------+-------+
| id   | customer_id | title |
+------+-------------+-------+
|    6 |           6 | Ms.   |
+------+-------------+-------+
1 row in set (0.00 sec)

mysql> select  * from Customer c left join OptionalInfo oi on c.id = oi. customer_id where coalesce( oi. title, '') <> 'Mr.';
+------+-------------+-------+
| id   | customer_id | title |
+------+-------------+-------+
|    1 |        NULL | NULL  |
|    3 |        NULL | NULL  |
|    4 |        NULL | NULL  |
|    6 |           6 | Ms.   |
+------+-------------+-------+
4 rows in set (0.00 sec)

mysql> select  * from Customer c left join OptionalInfo oi on c.id = oi. customer_id and coalesce( oi. title, '') <> 'Mr.';
+------+-------------+-------+
| id   | customer_id | title |
+------+-------------+-------+
|    1 |        NULL | NULL  |
|    2 |        NULL | NULL  |
|    3 |        NULL | NULL  |
|    4 |        NULL | NULL  |
|    5 |        NULL | NULL  |
|    6 |           6 | Ms.   |
+------+-------------+-------+
6 rows in set (0.01 sec)



===============================================================================
===============================================================================
===============================================================================

~~ order of operations.


mysql> select id from Customer;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
|    6 |
+------+
6 rows in set (0.00 sec)

mysql> select id from Customer limit 2;
+------+
| id   |
+------+
|    1 |
|    2 |
+------+
2 rows in set (0.01 sec)

mysql> select group_concat(id) from Customer limit 2;
+------------------+
| group_concat(id) |
+------------------+
| 1,2,3,4,5,6      |
+------------------+
1 row in set (0.00 sec)


mysql> select group_concat(id1) from (select id as id1 from Customer limit 2) as x;
+-------------------+
| group_concat(id1) |
+-------------------+
| 1,2               |
+-------------------+
1 row in set (0.00 sec)

===============================================================================
===============================================================================
===============================================================================

~~ 'freedom' of implementation in ordering.


mysql> select * from C;
+------+--------+
| num  | string |
+------+--------+
|    3 | x      |
|    3 | n      |
|    3 | z      |
|    2 | c      |
|    2 | r      |
+------+--------+
5 rows in set (0.00 sec)

mysql> select * from C order by num limit 4;
+------+--------+
| num  | string |
+------+--------+
|    2 | c      |
|    2 | r      |
|    3 | x      |
|    3 | n      |
+------+--------+
4 rows in set (0.00 sec)


could also return 3-x, 3-z, as well as 3-n, 3-z.

===============================================================================
===============================================================================
===============================================================================

~~ empty set logic.
~~ "if there are NO PARTS, then trivially ALL suppliers supply 'all' the parts"

mysql> select * from Supplier;
+------+
| s_id |
+------+
|    1 |
|    2 |
|    3 |
+------+
3 rows in set (0.00 sec)

mysql> select * from SupplierPart;
+------+------+
| s_id | p_id |
+------+------+
|    2 |  888 |
|    1 |  999 |
|    2 |  999 |
+------+------+
3 rows in set (0.00 sec)

mysql> select * from Part;
+------+
| p_id |
+------+
|  888 |
|  999 |
+------+
2 rows in set (0.00 sec)

mysql> select * from Supplier s where not exists( select * from Part p where not  exists ( select * from SupplierPart sp where s. s_id = sp. s_id and sp. p_id = p. p_id ) );
+------+
| s_id |
+------+
|    2 |
+------+
1 row in set (0.00 sec)

mysql> delete from Part;
Query OK, 2 rows affected (0.02 sec)

mysql> select * from Supplier s where not exists( select * from Part p where not  exists ( select * from SupplierPart sp where s. s_id = sp. s_id and sp. p_id = p. p_id ) );
+------+
| s_id |
+------+
|    1 |
|    2 |
|    3 |
+------+
3 rows in set (0.00 sec)



VERY SIMILAR IDEA NEXT, but with 'cars weighing more than any toyota' (or chevy), and what if there is NO toyota (or chevy)

mysql> select * from Cars;
+----------+----------+--------+
| model    | make     | weight |
+----------+----------+--------+
| tempo    | ford     |   1000 |
| aerostar | ford     |   4000 |
| corolla  | toyota   |    900 |
| camry    | toyota   |   1300 |
| escalade | cadillac |   5000 |
+----------+----------+--------+
5 rows in set (0.00 sec)

mysql> select * from Cars c1 where not exists ( select * from Cars c2 where c2.make = 'toyota' and c2.weight >= c1.weight );
+----------+----------+--------+
| model    | make     | weight |
+----------+----------+--------+
| aerostar | ford     |   4000 |
| escalade | cadillac |   5000 |
+----------+----------+--------+
2 rows in set (0.00 sec)

mysql> select * from Cars c1 where c1.weight > ( select max( c2.weight ) from Cars c2 where c2.make = 'toyota');
+----------+----------+--------+
| model    | make     | weight |
+----------+----------+--------+
| aerostar | ford     |   4000 |
| escalade | cadillac |   5000 |
+----------+----------+--------+
2 rows in set (0.00 sec)

mysql> select * from Cars c1 where not exists ( select * from Cars c2 where c2.make = 'chevrolet' and c2.weight >= c1.weight );
+----------+----------+--------+
| model    | make     | weight |
+----------+----------+--------+
| tempo    | ford     |   1000 |
| aerostar | ford     |   4000 |
| corolla  | toyota   |    900 |
| camry    | toyota   |   1300 |
| escalade | cadillac |   5000 |
+----------+----------+--------+
5 rows in set (0.00 sec)

mysql> select * from Cars c1 where c1.weight > ( select max( c2.weight ) from Cars c2 where c2.make = 'chevrolet');
Empty set (0.00 sec)
