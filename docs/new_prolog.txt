
==========================================
  PROLOG STRENGTHS
==========================================


In the Prolog programming language, every statement is either an implication (e.g. p -> q), a fact (a declaration that p(x) holds), or a goal.  The term rule is also used to refer to the implication statements.  Variables appearing in the implications and facts are taken to be implicitly universally quantified.  Variables appearing in goal statements are taken to be existentially quantified.  Goal statements initiate computation, and computation proceeds by repeatedly applying the resolution inference principle to derive a proof for the goal.  The implications and facts can be seen as axioms of a theory, and executing a Prolog program can been seen as conjecturing a theorem (the goal statement) and attempting to prove this theorem.

Prolog was created in the 1970s by Alain Colmerauer, who at times worked together with Robert Kowalski [].  At the time, Colmerauer was working on logical processing of French language statements, and Kowalski was working on theorem-proving and logic programming.

The mathematical basis supporting Prolog's inference mechanism dates farther back than the 1970s.  A crucial breakthrough for automated theorem-proving comes from the work on John Alan Robinson a decade prior [].  Robinson introduced the resolution principle, which in turn is based on work from the 1920s and 30s by the French logician Jacques Herbrand.  Kowalski developed restricted resolution algorithms such as SL-resolution [] and depth-first SL-resolution (known as SLD-resolution), which ultimately became the mechanism implemented in Prolog.

The influence upon Prolog of the mathematical logic results of Herbrand and Robinson is significant.  The workings of Prolog are not just "loosely informed by" Herbrand's work and Robinsons resolution; rather, the ISO standard for Prolog heavily relies on what it calls a "Herbrand algorithm" for unification and the "resolution algorithm" for attempting to satisfy a goal [iso].  A excellent intermediate-level overview of how unification and resolution are applied in Prolog is given by Sterling Shapiro.  A slightly more rigurous exposition can be found in Lloyd [].

Prolog technology was ultimately chosen for testing the ideas in this thesis because Prolog is stable, standardized, extremely well-documented, actively supported by several communities of Prolog users.  However, Prolog is clearly no longer the state-of-the-art in automated deduction.  A recent review of the state-of-the-art in automated deducation is given by Shankar [].

Early on during the elaboration of this thesis, the use of modern SMT solver tools was attempted.  Modern SMT solver tools are emerging as part of cutting-edge research projects, and the solvers are therefore unstable, under-documented, and often targeted towards narrow problems and benchmarks rather than general-purpose applicability.  Due to time constraints, a trade-off was made in this thesis in favor of decades-old Prolog technology.  This trade-off allowed us to arrive at some tangible results (detailed in Chapter 5), but at the cost of postponing the necessary research into SMT technology that must still take place for future iterations of the SQL verification tool.


==========================================
  PROLOG WEAKNESSES
==========================================

After choosing Prolog, a careful investigation of Prolog's weak points was undertaken.  Virtually every introduction to Prolog is emphatic in stating that Prolog is principally a programming language and can only be treated as a theorem-prover in a limited sense [],[].  Based on a survey of books and papers written about Prolog, the following list of six theorem-proving obstacles in Prolog was formed.  This is believed to be an exhaustive list of arguments to be made against using Prolog as a sound logical deduction tool.

The purpose of listing these obstacles is to show that each one has specifically been avoided in the Prolog code in the Appendices of this thesis.  Because these obstacles were painstakingly avoided, executing the Prolog code in the Appendices will indeed produce logically sound, valid results.

SECTION: Syntax is Restricted to Horn Clauses

Clause form is a commonly-used normal form for FOL formulas.  Arbitrary FOL formulas can be converted to this normal form, which simplifies subsequent alorithms that consume the formulas.

In clause form, sets of atomic formulas are the only syntactic structure allowed.  The atomic formulas can be positive (non-negated) or negative (negated).  The truth of a set of atomic formulas is the conjunction of the formulas.

Horn clauses obey a further restriction stating that the set of formulas contain at most one positive atomic formula.  What this means for users of Prolog is that all logic must be expressed using only the following three syntactic forms:

    (vector notation, x-bar, is used here to denotes the sequence of all variables used in the formula)

    FORALL x-bar. P(...) <- Q1(...) /\ Q2(...) ... /\ Qn(...)

    FORALL x-bar. P(...) <- T.

    E x-bar. Q1(...) /\ Q2(...) ... /\ Qn(...)

During the formulation of axioms used in this thesis, the Horn clause restriction was not a hindrance.  Furthermore, logic expressed in Horn clauses is no less correct than formulas where disjunction appears.  In other words, this particular limitation of Prolog does not threaten the soundness of any inferences, so we do not dwell on it any further.


SECTION: Unsound Unification

In Robinson's development of the resolution principle, one of his key insights was that a unification algorithm can be applied so that resolving a set of non-ground clauses becomes nearly as simple as resolving a set of ground clauses [rob],[lloyd].

In order for unification to form part of a sound inference system, the unification algorithm must include a step known as the occurs check [sterling],[lloyd].  When the occurs check is omitted, proof trees may be derived that do not represent valid logical deductions.

By default, Prolog execution calls upon a unification method that omits the occurs check.  An example of an incorrect outcome due to unsound unification is shown in Figure {}.  In Figure {}, "the_square(X)" (meaning "the square of X, or X^2) should not be outputted as a valid way to satisfy the goal "is_one(X)."  Given the logical statements in the top half of the figure, the only value for which is_one should hold is 1.

Thankfully, ISO Prolog provides a way to override this problematic default behavior.  There is a flag that allows a Prolog user to specify that the occurs check must be applied during every application of the unification algorithm.  As shown in the bottom portion of Figure {}, enabling this option results in the correct behavior, wherein only "X=1" is generated as a satisfying assignment for Ex. is_one(X).

This Prolog obstacle was duly addressed in this thesis by running all code in an execution environment where the occurs_check flag had been enabled.

SECTION: Arithmetic Issues

For multiple reasons, Prolog's support for arithmetic predicates relies on a hybrid approach that uses the computer hardware for efficient arithmetic evaluation, but that sacrifices the full logical expressiveness of predicates involving numeric relationships [sterling].

As illustrated in Figure {}, the consequence of this is that Prolog cannot prove statements such as Ex. 7 = 3 + X and E.x 3 < X.

This obstacle can at times cause frustration, but at no time can it cause Prolog to incorrectly deem conjectures like Ex. 7 = 3 + X to be invalid.  Instead, a runtime exception aborts the proof attempt.  This means that while arithmetic issues might impede our ability to cleanly encode certain logical relationships, it will not cause unsound inferences.  All code in the Appendices executes without runtime exceptions.

SECTION: Negation

Prolog's negation concept is the first obstacle in this chapter that truly poses a severe threat to Prolog's utility as a theorem-prover.  Prolog does not technically support logical negation.  Instead, it uses an alternative operation called *negation as failure*. The result is that for any variable X, it is impossible for Prolog to prove any statement of the form: Ex. -`alpha(x).  What's worse, Prolog actually outputs "provably invalid" (under the negation as failure rule) when asked to prove similar statements.  The Prolog output is troubling, though not technically incorrect given the well-documented negation as failure semantics.

The Prolog expression closest to Ex. -`alpha(x) is any goal statement of the form: \+ some_predicate(X).  It is tempting to read the preceding statement as "NOT some_predicate(X)," but such a reading is incorrect.  The Prolog symbol "\+" can only be read as "not" when applied to a *ground formula*.  A ground formula is one with no variables, such as "is_even(2)" or "is_mammal(dog)."  If there are variables in the formula, then "\+" does not mean "not."  Instead, with regard to the predicate that "\+" precedes, it means "predicate is not demonstrably satisfiable using the available set of Prolog program statements."

Figure {} helps make this discussion of negation more concrete.  The first goal statement in the figure appears to be asking "does there exist some X such that X is not homo sapiens?"  However, in Prolog the only correct reading of the goal is "is it the case that we cannot satisfy homo_sapiens(X) in this program?"  Sadly, in Prolog there is no way to ask the first question.  Also, there is very little advantage to be gained by being able to ask the second question, since simply asking "can we satisfy homo_sapiens(X)?" is easier and clearer.

In this thesis, Prolog's negation as failure is indeed problematic.  We need to be able to use clauses like "\+ some_predicate(X)" as though the logical meaning is "NOT some_predicate(X)."  As stated above, that is only valid if the formula is ground.  Another way of saying this is that (in Prolog) all variables in the formula must be *instantiated* before the negated formula becomes the next resolvent formula selected for unification.  However, it is possible to accurately predict when variables will become instantiated.  The Prolog standard specifies a precise order for unifying and resolving clauses, making it possible to ascertain whether a formula prefixed with "\+" will be processed before or after all its variables have been instantiated.

It was painstaking and tedious, but all uses of "\+" within the Prolog code of this thesis has been reviewed to ensure that "\+" is only attached to formulas in locations where instantiated predicate arguments are guaranteed.

Interestingly, alternative negation rules exist that are more faithful to traditional logical negation [].  However, this thesis uses standard Prolog, where "\+" has the problematic negation as failure characteristics that were described in this section.

SECTION: Depth-First Search

Prolog's depth-first traversal of proof trees is--along with negation as failure--another strong reason to avoid the use of Prolog when an industrial strength proof system is required.  Logically, the truth value of a conjunction of formulas is not affected by each formula's order of appearance in the conjunction.  However, when encoding conjunctions in Prolog, a great deal of care must go into the chosen order of formulas inside each conjunction.  Similarly, in Prolog it can matter whether two implication statements phi1 <- psi1 and phi2 <- psi2 are declared in the order just shown or instead appear with phi2 <- psi2 listed first.

Given a sequence of Prolog statements and an initial goal to invoke a computation, all logical outcomes of the computation can be determined by constructing an *SLD-tree* where the initial goal is the root of the tree.  A goal is a (possibly empty) set of atomic formulas.  In Prolog, the atomic formulas in a goal set possess a left-to-right order.  Subsequent tree nodes represent derived goals that emerge when one atomic formula from the parent node is unified with a program statement.  If the chosen atomic formula unifies with N different program statements, then N child nodes emerge.  When constructing an SLD-tree to representing standard Prolog behavior, child nodes are added (widening the tree) by always selecting the *leftmost* goal in the parent node and unifying it with each available program statement with which it can be unified.  Following unification, goals are deleted from the active goal set, so the child nodes will have a new goal as their leftmost goal.  In this way, subsequent levels of the tree (adding tree depth) are derived by pursuing unification of a new leftmost formula at each tree level.  For some branches in the tree, unification may ultimately result in a child node with an empty set of goal formulas.  Such a child is a success node.  At other times, the leftmost formula from a node may not unify with any program statement.  Such a node is a failure node.  For detailed discussion and diagrams, consult Lloyd [].

Given Prolog's left-to-right mechanism for selecting formulas from the goal, it is easy to show that reordering the formulas in a goal can make the difference between constructing a finite SLD-tree and constructing an SLD-tree with an infinite branch.  The fact that the differently-ordered goals are still logically equivalent is reflected in the fact that both trees will contain the same number of success nodes [lloyd].  However, it will be of little consolation to the Prolog user to know that success nodes exist if Prolog's depth-first traversal of the SLD-tree finds an infinite branch before finding a success node.

Figure {} shows two examples where reordering the formulas in a goal can either cause or eliminate infinite tree searches.  With the program shown in the figure, attempting to execute goal "sweet_and_pairable(chives)" causes an infinite search.  However, the sweet_and_pairable predicate simply encapsulates the conjunction of the two formulas "common_food_pairing(_,chives)" and "sweet(chives)."  If we reorder those formulas into the equivalent goal "sweet(chives),common_food_pairing(_,chives)," then the computation will terminate and correctly determine that the goal is false.  The second example in the figure shows that the conjunction "" results in endless searching, whereas the reordered conjunction "" terminates with the right answer.

In this thesis, several measures have been taken to eliminate infinite search trees.  For every type of goal used in our system, care was taken to ensure that only a finite SLD-tree could be constructed.  (finite domains, within_table_size_limit).


SECTION: Meta-Logical and Extra-Logical Features

The last reason why many Prolog textbooks caution against treating Prolog as a proof deduction system is that Prolog contains impure (side-effect producing) procedures that share the syntax of pure predicates but that are not true FOL predicates.  Extra-logical features include impure procedures for reading input from STDIN.  Meta-logical features include system procedures that examine the state of the current Prolog computation.

Clearly, when a set of Prolog program statements contains such features, it is no longer possible to interpret the program as a straightforward set of FOL axioms.  In this thesis, it was trivial to eschew any use of meta-logical and extra-logical procedures.  Therefore, the impurities introducible via these features are of no concern to the work done here.


In this chapter, an automated-theorem proving technology was chosen and vetted.  The soundness of its features has been examined, and weak points have been acknowledged so their effects can be avoided.  The next Chapter explains how theorem-proving will be harnessed as part of a SQL verification framework.


