#ifndef BORROWED_SQLITE_CODE_KEYWORD_HASH
#define BORROWED_SQLITE_CODE_KEYWORD_HASH

#include <string.h>

#include "generated_parser/lemon_sql_parse.h"
#include "generated_parser/extra_tokens.h"

#define sqlite3StrNICmp sqlite3_strnicmp

extern const unsigned char sqlite3UpperToLower[]; // implemented in global.c




/*
** Some systems have stricmp().  Others have strcasecmp().  Because
** there is no consistency, we will define our own.
**
** IMPLEMENTATION-OF: R-20522-24639 The sqlite3_strnicmp() API allows
** applications and extensions to compare the contents of two buffers
** containing UTF-8 strings in a case-independent fashion, using the same
** definition of case independence that SQLite uses internally when
** comparing identifiers.
*/
int sqlite3StrICmp(const char *zLeft, const char *zRight);


int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N);

/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 175 */
int keywordCode(const char *z, int n);

int sqlite3KeywordCode(const unsigned char *z, int n);

#define SQLITE_N_KEYWORD 121

#endif // #ifndef BORROWED_SQLITE_CODE_KEYWORD_HASH
